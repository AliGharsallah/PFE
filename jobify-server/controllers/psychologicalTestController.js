// controllers/psychologicalTestController.js
const PsychologicalTest = require('../models/PsychologicalTest');
const TechnicalTest = require('../models/TechnicalTest');
const Application = require('../models/Application');
const { StatusCodes } = require('http-status-codes');
const { BadRequestError, NotFoundError, UnauthenticatedError } = require('../errors');

// ================================
// QUESTIONS PAR D√âFAUT AM√âLIOR√âES
// ================================

const getDefaultQuestions = () => {
  const questionPools = {
    linguistic: [
      {
        id: 'ling_1',
        question: "D√©crivez en d√©tail votre approche pour r√©soudre un probl√®me complexe au travail. Expliquez votre processus de r√©flexion √©tape par √©tape.",
        category: 'linguistic',
        difficulty: 'medium'
      },
      {
        id: 'ling_2',
        question: "Racontez-moi une situation o√π vous avez d√ª expliquer un concept technique complexe √† quelqu'un sans background technique. Comment vous y √™tes-vous pris ?",
        category: 'linguistic',
        difficulty: 'hard'
      },
      {
        id: 'ling_3',
        question: "D√©crivez votre m√©thode de priorisation des t√¢ches. Donnez des exemples concrets de votre organisation quotidienne.",
        category: 'linguistic',
        difficulty: 'easy'
      },
      {
        id: 'ling_4',
        question: "Comment pr√©sentez-vous une id√©e innovante √† votre √©quipe ? D√©crivez votre strat√©gie de communication.",
        category: 'linguistic',
        difficulty: 'medium'
      }
    ],
    stress: [
      {
        id: 'stress_1',
        question: "Vous apprenez 10 minutes avant une pr√©sentation cruciale que votre ordinateur est en panne et vos donn√©es perdues. Quelle est votre r√©action imm√©diate et votre plan d'action ?",
        category: 'stress',
        difficulty: 'hard'
      },
      {
        id: 'stress_2',
        question: "Vous avez 3 projets urgents √† livrer le m√™me jour, mais votre √©quipe tombe malade. Comment g√©rez-vous cette situation critique ?",
        category: 'stress',
        difficulty: 'hard'
      },
      {
        id: 'stress_3',
        question: "Un client important vous contacte en col√®re √† 18h un vendredi, mena√ßant d'annuler son contrat. Que faites-vous dans l'imm√©diat ?",
        category: 'stress',
        difficulty: 'medium'
      },
      {
        id: 'stress_4',
        question: "Votre budget projet vient d'√™tre coup√© de 50% √† mi-parcours. Comment r√©agissez-vous et que dites-vous √† votre √©quipe ?",
        category: 'stress',
        difficulty: 'hard'
      }
    ],
    emotional: [
      {
        id: 'emot_1',
        question: "Parlez-moi d'une fois o√π vous avez ressenti une forte frustration au travail. Comment avez-vous g√©r√© vos √©motions et quelle le√ßon en avez-vous tir√©e ?",
        category: 'emotional',
        difficulty: 'medium'
      },
      {
        id: 'emot_2',
        question: "D√©crivez une situation o√π vous avez d√ª faire preuve d'empathie avec un coll√®gue en difficult√©. Comment avez-vous abord√© la situation ?",
        category: 'emotional',
        difficulty: 'medium'
      },
      {
        id: 'emot_3',
        question: "Comment g√©rez-vous les critiques n√©gatives ? Donnez-moi un exemple r√©cent et votre r√©action √©motionnelle.",
        category: 'emotional',
        difficulty: 'easy'
      },
      {
        id: 'emot_4',
        question: "Racontez-moi un moment o√π vous avez d√ª motiver une √©quipe d√©motiv√©e. Quelle approche √©motionnelle avez-vous utilis√©e ?",
        category: 'emotional',
        difficulty: 'medium'
      }
    ],
    personality: [
      {
        id: 'pers_1',
        question: "D√©crivez votre style de leadership avec des exemples concrets. Comment motivez-vous et dirigez-vous une √©quipe ?",
        category: 'personality',
        difficulty: 'medium'
      },
      {
        id: 'pers_2',
        question: "Parlez-moi de vos valeurs professionnelles fondamentales. Comment les appliquez-vous dans votre travail quotidien ?",
        category: 'personality',
        difficulty: 'easy'
      },
      {
        id: 'pers_3',
        question: "Dans quel type d'environnement de travail √™tes-vous le plus productif ? D√©crivez votre cadre id√©al et pourquoi.",
        category: 'personality',
        difficulty: 'easy'
      },
      {
        id: 'pers_4',
        question: "Comment √©quilibrez-vous prise de risque et prudence dans vos d√©cisions professionnelles ? Donnez des exemples.",
        category: 'personality',
        difficulty: 'medium'
      }
    ]
  };

  // S√©lectionner une question al√©atoire de chaque cat√©gorie + 2 suppl√©mentaires
  const selectedQuestions = [];
  
  Object.keys(questionPools).forEach(category => {
    const pool = questionPools[category];
    const randomIndex = Math.floor(Math.random() * pool.length);
    selectedQuestions.push({ ...pool[randomIndex] });
  });

  // Ajouter 2 questions suppl√©mentaires al√©atoires pour avoir 6 questions au total
  const allQuestions = Object.values(questionPools).flat();
  for (let i = 0; i < 2; i++) {
    let randomQuestion;
    do {
      const randomIndex = Math.floor(Math.random() * allQuestions.length);
      randomQuestion = allQuestions[randomIndex];
    } while (selectedQuestions.some(q => q.id === randomQuestion.id));
    
    selectedQuestions.push({ ...randomQuestion });
  }

  console.log(`‚úÖ ${selectedQuestions.length} questions s√©lectionn√©es:`);
  selectedQuestions.forEach((q, i) => {
    console.log(`  ${i+1}. [${q.category}/${q.difficulty}] ${q.question.substring(0, 50)}...`);
  });

  return selectedQuestions;
};

// ================================
// CR√âER UN TEST PSYCHOLOGIQUE
// ================================
const createPsychologicalTest = async (req, res) => {
  // ‚úÖ AJOUT: Logs de debug complets
  console.log('üéØ === DEBUG ROUTE createPsychologicalTest ===');
  console.log('üìç URL compl√®te:', req.originalUrl);
  console.log('üìã Method:', req.method);
  console.log('üì¶ Params:', req.params);
  console.log('üë§ User:', req.user);
  console.log('üéØ === FIN DEBUG ===');
  
  const { technicalTestId } = req.params;
  const userId = req.user.userId;

  try {
    console.log(`üß† Cr√©ation test psychologique pour test technique ${technicalTestId}`);

    // V√©rifier que le test technique existe et appartient au candidat
    const technicalTest = await TechnicalTest.findById(technicalTestId)
      .populate('application')  // ‚úÖ CORRIG√â: minuscule
      .populate('job');

    if (!technicalTest) {
      throw new NotFoundError('Test technique non trouv√©');
    }

    if (technicalTest.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√© √† ce test technique');
    }

    // V√©rifier que le test technique est compl√©t√©
    if (technicalTest.status !== 'completed') {
      throw new BadRequestError('Le test technique doit √™tre compl√©t√© avant le test psychologique');
    }

    // V√©rifier qu'un test psychologique n'existe pas d√©j√†
    const existingPsychTest = await PsychologicalTest.findOne({ 
      technicalTest: technicalTestId 
    });

    if (existingPsychTest) {
      console.log('‚ö†Ô∏è Test psychologique existant trouv√©, retour des informations');
      
      // Pr√©parer les questions pour le frontend
      const safeQuestions = existingPsychTest.questions.map(q => ({
        _id: q.id,
        questionText: q.question,
        category: q.category,
        difficulty: q.difficulty
      }));

      return res.status(StatusCodes.OK).json({
        testId: existingPsychTest._id,
        status: existingPsychTest.status,
        questions: safeQuestions,
        message: 'Test psychologique d√©j√† cr√©√©'
      });
    }

    // G√©n√©rer les questions
    const questions = getDefaultQuestions();
    console.log(`üìù ${questions.length} questions g√©n√©r√©es`);

    // Cr√©er le test psychologique avec les donn√©es comportementales initiales
    const psychologicalTest = await PsychologicalTest.create({
      technicalTest: technicalTest._id,
      application: technicalTest.application._id,  // ‚úÖ Acc√®s correct
      candidate: userId,
      job: technicalTest.job._id,
      questions: questions,
      status: 'created',
      // ‚úÖ AJOUT: Donn√©es comportementales initiales requises
      behavioralData: {
        testDuration: 0, // Sera mis √† jour lors de la compl√©tion
        securityViolations: 0,
        handDetectionTime: 0,
        cameraInterruptions: 0,
        faceDetectionTime: 0,
        totalSpeakingTime: 0,
        averageResponseTime: 0,
        pausesCount: 0,
        attentionScore: 100,
        emotionalState: 'neutral',
        behavioralFlags: []
      }
    });

    console.log('‚úÖ Test psychologique cr√©√©:', psychologicalTest._id);

    // Pr√©parer les questions pour le frontend
    const safeQuestions = questions.map(q => ({
      _id: q.id,
      questionText: q.question,
      category: q.category,
      difficulty: q.difficulty
    }));

    res.status(StatusCodes.CREATED).json({
      testId: psychologicalTest._id,
      questions: safeQuestions,
      status: psychologicalTest.status,
      message: 'Test psychologique cr√©√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation test psychologique:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        message: error.message
      });
    }

    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'Erreur lors de la cr√©ation du test psychologique'
    });
  }
};

// ================================
// R√âCUP√âRER UN TEST PSYCHOLOGIQUE
// ================================

const getPsychologicalTest = async (req, res) => {
  const { testId } = req.params;
  const userId = req.user.userId;

  try {
    console.log(`üìñ R√©cup√©ration test psychologique ${testId}`);

    const test = await PsychologicalTest.findById(testId);
    
    if (!test) {
      throw new NotFoundError('Test psychologique non trouv√©');
    }

    if (test.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√©');
    }

    // Pr√©parer les questions pour le frontend
    const safeQuestions = test.questions.map(q => ({
      _id: q.id,
      questionText: q.question,
      category: q.category,
      difficulty: q.difficulty
    }));

    console.log(`‚úÖ Test r√©cup√©r√© avec ${safeQuestions.length} questions`);

    res.status(StatusCodes.OK).json({
      testId: test._id,
      questions: safeQuestions,
      status: test.status,
      startedAt: test.startedAt,
      completedAt: test.completedAt
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration test:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        message: error.message
      });
    }

    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'Erreur lors de la r√©cup√©ration du test'
    });
  }
};

// ================================
// D√âMARRER UN TEST PSYCHOLOGIQUE
// ================================

const startPsychologicalTest = async (req, res) => {
  const { testId } = req.params;
  const userId = req.user.userId;

  try {
    console.log(`‚ñ∂Ô∏è D√©marrage test psychologique ${testId}`);

    const test = await PsychologicalTest.findById(testId);
    
    if (!test) {
      throw new NotFoundError('Test psychologique non trouv√©');
    }

    if (test.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√©');
    }

    if (test.status === 'completed') {
      throw new BadRequestError('Ce test a d√©j√† √©t√© compl√©t√©');
    }

    if (test.status === 'in_progress') {
      return res.status(StatusCodes.OK).json({
        message: 'Test d√©j√† en cours',
        startedAt: test.startedAt
      });
    }

    // D√©marrer le test
    test.status = 'in_progress';
    test.startedAt = new Date();
    await test.save();

    console.log('‚úÖ Test psychologique d√©marr√©');

    res.status(StatusCodes.OK).json({
      message: 'Test psychologique d√©marr√©',
      startedAt: test.startedAt
    });

  } catch (error) {
    console.error('‚ùå Erreur d√©marrage test:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        message: error.message
      });
    }

    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'Erreur lors du d√©marrage du test'
    });
  }
};

// ================================
// ANALYSE VOCALE AM√âLIOR√âE
// ================================

const analyzeVoiceResponse = (transcript, duration, category) => {
  if (!transcript || transcript.trim().length === 0) {
    return {
      speechRate: 0,
      emotionalTone: 'neutral',
      linguisticComplexity: 0,
      coherenceScore: 0,
      totalWords: 0
    };
  }

  const words = transcript.trim().split(/\s+/).filter(word => word.length > 0);
  const totalWords = words.length;
  const speechRate = duration > 0 ? Math.round((totalWords / duration) * 60) : 0;

  // Indicateurs de stress
  const stressWords = ['euh', 'hmm', 'donc', 'voil√†', 'bon', 'ben', 'enfin', 'comment dire'];
  const stressCount = stressWords.reduce((count, word) => 
    count + (transcript.toLowerCase().split(word).length - 1), 0
  );

  // Complexit√© linguistique
  const complexWords = words.filter(word => word.length > 7).length;
  const linguisticComplexity = totalWords > 0 ? (complexWords / totalWords) * 100 : 0;

  // Analyse √©motionnelle basique
  const positiveWords = ['bon', 'bien', 'excellent', 'parfait', 'r√©ussi', 'succ√®s', 'satisfait', 'heureux'];
  const negativeWords = ['difficile', 'probl√®me', '√©chec', 'erreur', 'mauvais', 'frustrant', 'stress'];
  
  const positiveCount = positiveWords.reduce((count, word) => 
    count + (transcript.toLowerCase().split(word).length - 1), 0
  );
  const negativeCount = negativeWords.reduce((count, word) => 
    count + (transcript.toLowerCase().split(word).length - 1), 0
  );

  // Indicateurs de confiance
  const confidenceWords = ['je pense', 'je crois', 'je suis s√ªr', 'certainement', '√©videmment'];
  const hesitationWords = ['peut-√™tre', 'je ne sais pas', 'difficile √† dire', '√ßa d√©pend'];
  
  const confidenceCount = confidenceWords.reduce((count, phrase) => 
    count + (transcript.toLowerCase().split(phrase).length - 1), 0
  );
  const hesitationCount = hesitationWords.reduce((count, phrase) => 
    count + (transcript.toLowerCase().split(phrase).length - 1), 0
  );

  // D√©terminer le ton √©motionnel
  let emotionalTone = 'neutral';
  if (stressCount > 5 || negativeCount > positiveCount + 2) {
    emotionalTone = 'stressed';
  } else if (speechRate > 180 || confidenceCount > hesitationCount) {
    emotionalTone = 'confident';
  } else if (speechRate < 90 || hesitationCount > confidenceCount || negativeCount > positiveCount) {
    emotionalTone = 'hesitant';
  } else if (positiveCount > 0 && speechRate >= 120) {
    emotionalTone = 'confident';
  }

  // Score de coh√©rence (bas√© sur la longueur, structure et cat√©gorie)
  const sentenceCount = transcript.split(/[.!?]+/).filter(s => s.trim().length > 0).length;
  const avgWordsPerSentence = sentenceCount > 0 ? totalWords / sentenceCount : 0;
  
  let coherenceScore = 0;
  
  // Points pour la longueur appropri√©e
  if (totalWords >= 30) coherenceScore += 30; // R√©ponse substantielle
  else coherenceScore += (totalWords / 30) * 30;
  
  // Points pour la structure des phrases
  if (avgWordsPerSentence >= 8 && avgWordsPerSentence <= 25) coherenceScore += 30;
  else if (avgWordsPerSentence > 0) coherenceScore += 15;
  
  // Points pour la complexit√© linguistique
  if (linguisticComplexity >= 15 && linguisticComplexity <= 40) coherenceScore += 25;
  else if (linguisticComplexity > 0) coherenceScore += 10;
  
  // Points bonus selon la cat√©gorie
  if (category === 'linguistic' && linguisticComplexity > 30) coherenceScore += 15;
  if (category === 'stress' && speechRate > 100) coherenceScore += 10;
  if (category === 'emotional' && (positiveCount > 0 || negativeCount > 0)) coherenceScore += 10;
  if (category === 'personality' && totalWords > 40) coherenceScore += 10;

  coherenceScore = Math.min(100, Math.max(0, coherenceScore));

  return {
    speechRate: Math.max(0, speechRate),
    emotionalTone,
    linguisticComplexity: Math.round(Math.max(0, Math.min(100, linguisticComplexity))),
    coherenceScore: Math.round(coherenceScore),
    totalWords
  };
};

// ================================
// ANALYSE COMPL√àTE DES R√âSULTATS
// ================================

const analyzeTestResults = (answers, behavioralData) => {
  console.log('ü§ñ Analyse compl√®te des r√©sultats du test psychologique...');

  // Extraire les analyses vocales
  const voiceMetrics = Array.from(answers.values()).map(answer => answer.analysis);
  const totalQuestions = answers.size;

  // Calculs des m√©triques vocales moyennes
  const avgSpeechRate = voiceMetrics.reduce((sum, m) => sum + m.speechRate, 0) / voiceMetrics.length;
  const avgComplexity = voiceMetrics.reduce((sum, m) => sum + m.linguisticComplexity, 0) / voiceMetrics.length;
  const avgCoherence = voiceMetrics.reduce((sum, m) => sum + m.coherenceScore, 0) / voiceMetrics.length;
  const totalWords = voiceMetrics.reduce((sum, m) => sum + m.totalWords, 0);

  // Analyse des tons √©motionnels
  const emotionalTones = voiceMetrics.map(m => m.emotionalTone);
  const stressedCount = emotionalTones.filter(t => t === 'stressed').length;
  const confidentCount = emotionalTones.filter(t => t === 'confident').length;
  const hesitantCount = emotionalTones.filter(t => t === 'hesitant').length;
  const neutralCount = emotionalTones.filter(t => t === 'neutral').length;

  // Calculs des traits de personnalit√© (Big Five adapt√©s)
  const emotionalStability = Math.max(0, 100 - (stressedCount / totalQuestions) * 100);
  const confidence = (confidentCount / totalQuestions) * 100;
  const extraversionScore = Math.min(100, (avgSpeechRate / 150) * 100);
  const conscientiousnessScore = Math.min(100, avgCoherence);
  const opennessScore = Math.min(100, avgComplexity * 2);

  // Calculs des capacit√©s cognitives
  const problemSolvingScore = Math.min(100, (avgComplexity * 1.2 + avgCoherence * 0.8) / 2);
  const analyticalScore = Math.min(100, avgCoherence);
  const creativityScore = Math.min(100, opennessScore * 0.9 + (totalWords / totalQuestions / 50) * 20);
  const attentionScore = Math.max(0, 100 - (behavioralData.securityViolations || 0) * 15);

  // Scores d'intelligence √©motionnelle
  const selfAwarenessScore = Math.min(100, emotionalStability + (confidence * 0.3));
  const empathyScore = Math.min(100, (avgCoherence + (100 - (stressedCount / totalQuestions) * 100)) / 2);
  const socialSkillsScore = Math.min(100, extraversionScore);
  const emotionalRegulationScore = Math.min(100, emotionalStability);

  // Patterns comportementaux
  const leadershipScore = Math.min(100, (confidence + conscientiousnessScore + extraversionScore) / 3);
  const teamCollaborationScore = Math.min(100, (extraversionScore + conscientiousnessScore + empathyScore) / 3);
  const stressManagementScore = Math.min(100, emotionalStability);
  const adaptabilityScore = Math.min(100, opennessScore + (confidence * 0.5));

  return {
    personality_traits: {
      openness: Math.round(opennessScore),
      conscientiousness: Math.round(conscientiousnessScore),
      extraversion: Math.round(extraversionScore),
      agreeableness: Math.round((empathyScore + teamCollaborationScore) / 2),
      neuroticism: Math.round(100 - emotionalStability)
    },
    cognitive_abilities: {
      problem_solving: Math.round(problemSolvingScore),
      analytical_thinking: Math.round(analyticalScore),
      creativity: Math.round(creativityScore),
      attention_to_detail: Math.round(attentionScore)
    },
    emotional_intelligence: {
      self_awareness: Math.round(selfAwarenessScore),
      empathy: Math.round(empathyScore),
      social_skills: Math.round(socialSkillsScore),
      emotional_regulation: Math.round(emotionalRegulationScore)
    },
    behavioral_patterns: {
      leadership_potential: Math.round(leadershipScore),
      team_collaboration: Math.round(teamCollaborationScore),
      stress_management: Math.round(stressManagementScore),
      adaptability: Math.round(adaptabilityScore)
    },
    vocal_patterns: {
      average_speech_rate: Math.round(avgSpeechRate),
      emotional_stability: Math.round(emotionalStability),
      linguistic_sophistication: Math.round(avgComplexity),
      response_coherence: Math.round(avgCoherence),
      stress_indicators: Math.round((stressedCount / totalQuestions) * 100)
    },
    overall_score: 0, // Sera calcul√© par la m√©thode du mod√®le
    recommendations: generateRecommendations(avgSpeechRate, avgComplexity, emotionalStability, behavioralData, voiceMetrics),
    detailed_insights: generateDetailedInsights(voiceMetrics, behavioralData, emotionalTones)
  };
};

// ================================
// G√âN√âRATION DE RECOMMANDATIONS
// ================================

const generateRecommendations = (speechRate, complexity, emotionalStability, behavioralData, voiceMetrics) => {
  const recommendations = [];

  // Recommandations bas√©es sur le d√©bit de parole
  if (speechRate < 80) {
    recommendations.push("D√©veloppez votre confiance en expression orale - pratiquez des pr√©sentations courtes r√©guli√®rement");
  } else if (speechRate > 200) {
    recommendations.push("Prenez le temps de ralentir votre d√©bit de parole pour am√©liorer la clart√© de votre communication");
  } else if (speechRate >= 120 && speechRate <= 160) {
    recommendations.push("Excellent contr√¥le du d√©bit de parole - utilisez cette comp√©tence pour diriger des r√©unions");
  }

  // Recommandations bas√©es sur la complexit√© linguistique
  if (complexity < 15) {
    recommendations.push("Enrichissez votre vocabulaire professionnel en lisant des articles sp√©cialis√©s dans votre domaine");
  } else if (complexity > 50) {
    recommendations.push("Excellente ma√Ætrise du vocabulaire - consid√©rez des r√¥les de formation ou de mentorat");
  }

  // Recommandations bas√©es sur la stabilit√© √©motionnelle
  if (emotionalStability < 50) {
    recommendations.push("D√©veloppez des techniques de gestion du stress comme la m√©ditation ou la respiration profonde");
  } else if (emotionalStability > 85) {
    recommendations.push("Votre stabilit√© √©motionnelle est exceptionnelle - consid√©rez des r√¥les de leadership en situation de crise");
  }

  // Recommandations bas√©es sur les violations de s√©curit√©
  const violations = behavioralData.securityViolations || 0;
  if (violations > 5) {
    recommendations.push("Travaillez sur votre concentration et discipline - pratiquez des exercices d'attention soutenue");
  } else if (violations === 0) {
    recommendations.push("Discipline exemplaire - votre capacit√© √† suivre les instructions est un atout majeur");
  }

  // Recommandations bas√©es sur la coh√©rence des r√©ponses
  const avgCoherence = voiceMetrics.reduce((sum, m) => sum + m.coherenceScore, 0) / voiceMetrics.length;
  if (avgCoherence > 80) {
    recommendations.push("Excellente structuration de pens√©e - id√©al pour des r√¥les de planification strat√©gique");
  } else if (avgCoherence < 50) {
    recommendations.push("Travaillez sur la structuration de vos id√©es - pratiquez l'art de raconter des histoires");
  }

  // Recommandation g√©n√©rale si aucune sp√©cifique
  if (recommendations.length === 0) {
    recommendations.push("Profil √©quilibr√© - continuez √† d√©velopper vos points forts tout en restant ouvert aux opportunit√©s d'am√©lioration");
  }

  // Limiter √† 4 recommandations maximum
  return recommendations.slice(0, 4);
};

// ================================
// G√âN√âRATION D'INSIGHTS D√âTAILL√âS
// ================================

const generateDetailedInsights = (voiceMetrics, behavioralData, emotionalTones) => {
  const insights = [];

  // Analyse de la progression dans le test
  if (voiceMetrics.length > 2) {
    const firstThird = voiceMetrics.slice(0, Math.ceil(voiceMetrics.length / 3));
    const lastThird = voiceMetrics.slice(-Math.ceil(voiceMetrics.length / 3));

    const firstAvgRate = firstThird.reduce((sum, m) => sum + m.speechRate, 0) / firstThird.length;
    const lastAvgRate = lastThird.reduce((sum, m) => sum + m.speechRate, 0) / lastThird.length;

    if (lastAvgRate > firstAvgRate * 1.3) {
      insights.push({
        category: 'Progression',
        insight: 'Am√©lioration notable du d√©bit de parole au cours du test, excellent indicateur d\'adaptabilit√© et de mont√©e en confiance',
        confidence: 88
      });
    } else if (lastAvgRate < firstAvgRate * 0.7) {
      insights.push({
        category: 'Endurance',
        insight: 'Diminution du d√©bit de parole en fin de test, possibles signes de fatigue mentale ou de concentration d√©croissante',
        confidence: 82
      });
    }
  }

  // Analyse des patterns √©motionnels
  const stressedCount = emotionalTones.filter(t => t === 'stressed').length;
  const confidentCount = emotionalTones.filter(t => t === 'confident').length;
  const totalResponses = emotionalTones.length;

  if (confidentCount > stressedCount * 2) {
    insights.push({
      category: 'Confiance',
      insight: 'Maintien d\'un ton confiant tout au long du test, excellente ma√Ætrise √©motionnelle sous pression',
      confidence: 92
    });
  } else if (stressedCount > confidentCount * 2) {
    insights.push({
      category: 'Gestion du stress',
      insight: 'Tendance √† montrer des signes de stress vocal, b√©n√©ficierait de techniques de relaxation avant les pr√©sentations',
      confidence: 85
    });
  }

  // Analyse comportementale
  const violations = behavioralData.securityViolations || 0;
  if (violations === 0) {
    insights.push({
      category: 'Discipline',
      insight: 'Respect parfait des consignes de s√©curit√©, indicateur fort de discipline et d\'attention aux d√©tails',
      confidence: 98
    });
  } else if (violations > 3) {
    insights.push({
      category: 'Attention',
      insight: 'Plusieurs infractions aux consignes d√©tect√©es, sugg√®re une tendance √† la distraction sous pression',
      confidence: 90
    });
  }

  // Analyse de la richesse linguistique
  const avgComplexity = voiceMetrics.reduce((sum, m) => sum + m.linguisticComplexity, 0) / voiceMetrics.length;
  const avgWords = voiceMetrics.reduce((sum, m) => sum + m.totalWords, 0) / voiceMetrics.length;

  if (avgComplexity > 40 && avgWords > 60) {
    insights.push({
      category: 'Communication',
      insight: 'Excellent niveau de sophistication linguistique et richesse d\'expression, id√©al pour des r√¥les de communication complexe',
      confidence: 94
    });
  } else if (avgComplexity < 15 && avgWords < 30) {
    insights.push({
      category: 'Expression',
      insight: 'R√©ponses concises avec vocabulaire simple, pourrait b√©n√©ficier d\'un d√©veloppement de l\'expression orale',
      confidence: 87
    });
  }

  // Analyse de la coh√©rence
  const avgCoherence = voiceMetrics.reduce((sum, m) => sum + m.coherenceScore, 0) / voiceMetrics.length;
  if (avgCoherence > 85) {
    insights.push({
      category: 'Structure de pens√©e',
      insight: 'Pens√©e tr√®s bien structur√©e et r√©ponses coh√©rentes, excellente capacit√© de synth√®se et d\'organisation',
      confidence: 91
    });
  }

  return insights.slice(0, 5); // Limiter √† 5 insights maximum
};

// ================================
// FONCTIONS UTILITAIRES POUR L'ANALYSE
// ================================

const determineEmotionalState = (answers) => {
  const analyses = Array.from(answers.values()).map(a => a.analysis);
  const stressedCount = analyses.filter(a => a.emotionalTone === 'stressed').length;
  const confidentCount = analyses.filter(a => a.emotionalTone === 'confident').length;
  const hesitantCount = analyses.filter(a => a.emotionalTone === 'hesitant').length;
  const neutralCount = analyses.filter(a => a.emotionalTone === 'neutral').length;
  
  const total = analyses.length;
  
  if (stressedCount / total > 0.4) return 'stressed';
  if (confidentCount / total > 0.4) return 'confident';
  if (hesitantCount / total > 0.3) return 'anxious';
  return 'calm';
};

const calculateConcentrationLevel = (behavioralData) => {
  const baseScore = 100;
  const violations = behavioralData.securityViolations || 0;
  const interruptions = behavioralData.cameraInterruptions || 0;
  
  // P√©nalit√©s progressives
  const violationPenalty = violations * 12; // -12 points par violation
  const interruptionPenalty = interruptions * 8; // -8 points par interruption cam√©ra
  
  return Math.max(0, Math.min(100, baseScore - violationPenalty - interruptionPenalty));
};

const calculateThinkingCompliance = (behavioralData) => {
  const expectedThinkingTime = (behavioralData.numberOfQuestions || 6) * 30; // 30s par question
  const actualComplianceTime = behavioralData.totalThinkingComplianceTime || expectedThinkingTime * 0.85;
  
  return Math.min(100, (actualComplianceTime / expectedThinkingTime) * 100);
};

const calculateAnsweringEngagement = (answers) => {
  const analyses = Array.from(answers.values()).map(a => a.analysis);
  const avgWords = analyses.reduce((sum, a) => sum + a.totalWords, 0) / analyses.length;
  const avgCoherence = analyses.reduce((sum, a) => sum + a.coherenceScore, 0) / analyses.length;
  
  // Score bas√© sur la richesse et la coh√©rence des r√©ponses
  const wordScore = Math.min(100, (avgWords / 50) * 100); // 50 mots = score parfait
  const coherenceScore = avgCoherence;
  
  return Math.round((wordScore * 0.4 + coherenceScore * 0.6));
};

const calculateTransitionEfficiency = (behavioralData) => {
  const expectedTransitionTime = (behavioralData.numberOfQuestions || 6) * 3; // 3s par transition
  const actualTransitionTime = behavioralData.totalTransitionTime || expectedTransitionTime;
  
  if (actualTransitionTime <= expectedTransitionTime) return 100;
  
  const penalty = ((actualTransitionTime - expectedTransitionTime) / expectedTransitionTime) * 100;
  return Math.max(0, 100 - penalty);
};

// ================================
// SOUMETTRE LES R√âPONSES DU TEST
// ================================

// ================================
// SOUMETTRE LES R√âPONSES DU TEST - VERSION COMPL√àTE ET CORRIG√âE
// ================================

const submitPsychologicalTest = async (req, res) => {
  const { testId } = req.params;
  const { answers, behavioralData } = req.body;
  const userId = req.user.userId;

  try {
    // ‚úÖ LOGS DE DEBUG COMPLETS
    console.log('üéØ === DEBUG SOUMISSION COMPL√àTE ===');
    console.log('üì¶ req.body:', JSON.stringify(req.body, null, 2));
    console.log('üì¶ req.body type:', typeof req.body);
    console.log('üì¶ req.body keys:', Object.keys(req.body || {}));
    console.log('üìã answers:', answers ? 'pr√©sent' : 'absent', typeof answers);
    console.log('üìã behavioralData:', behavioralData ? 'pr√©sent' : 'absent', typeof behavioralData);
    console.log('üéØ === FIN DEBUG ===');

    console.log(`üìù Soumission test psychologique ${testId}`);
    console.log('üì¶ Donn√©es re√ßues:', {
      answersCount: answers ? Object.keys(answers).length : 0,
      behavioralData: behavioralData ? 'pr√©sent' : 'absent',
      userId: userId
    });

    // ‚úÖ AM√âLIORATION: Validation plus d√©taill√©e
    if (!answers || typeof answers !== 'object') {
      console.log('‚ùå Erreur: R√©ponses manquantes ou invalides');
      return res.status(StatusCodes.BAD_REQUEST).json({
        message: 'R√©ponses requises et doivent √™tre un objet',
        received: typeof answers,
        bodyReceived: req.body
      });
    }

    if (!behavioralData || typeof behavioralData !== 'object') {
      console.log('‚ùå Erreur: Donn√©es comportementales manquantes ou invalides');
      return res.status(StatusCodes.BAD_REQUEST).json({
        message: 'Donn√©es comportementales requises',
        received: typeof behavioralData,
        bodyReceived: req.body
      });
    }

    const test = await PsychologicalTest.findById(testId);
    
    if (!test) {
      console.log('‚ùå Erreur: Test non trouv√©');
      return res.status(StatusCodes.NOT_FOUND).json({
        message: 'Test psychologique non trouv√©'
      });
    }

    if (test.candidate.toString() !== userId) {
      console.log('‚ùå Erreur: Acc√®s non autoris√©');
      return res.status(StatusCodes.UNAUTHORIZED).json({
        message: 'Acc√®s non autoris√©'
      });
    }

    if (test.status === 'completed') {
      console.log('‚ùå Erreur: Test d√©j√† compl√©t√©');
      return res.status(StatusCodes.BAD_REQUEST).json({
        message: 'Ce test a d√©j√† √©t√© compl√©t√©'
      });
    }

    // Traiter et analyser chaque r√©ponse
    const processedAnswers = new Map();
    const questionsMap = new Map(test.questions.map(q => [q.id, q]));

    console.log('üîç Analyse des r√©ponses vocales...');
    console.log(`üìã Questions disponibles: ${test.questions.length}`);
    console.log(`üìã R√©ponses re√ßues: ${Object.keys(answers).length}`);

    // ‚úÖ BOUCLE CORRIG√âE AVEC GESTION DES TRANSCRIPTS VIDES
    for (const [questionId, answerData] of Object.entries(answers)) {
      console.log(`üîç Traitement r√©ponse pour question ID: "${questionId}"`);
      
      const question = questionsMap.get(questionId);
      if (!question) {
        console.warn(`‚ö†Ô∏è Question "${questionId}" non trouv√©e`);
        console.warn(`üìã IDs disponibles:`, Array.from(questionsMap.keys()));
        continue;
      }

      // ‚úÖ AM√âLIORATION: Validation des donn√©es de r√©ponse avec defaults
      const transcript = answerData.transcript || 'Aucune transcription disponible';
      const duration = answerData.duration || 60;

      console.log(`üìù Transcript re√ßu pour ${questionId}: "${transcript}" (${transcript.length} chars)`);

      // Analyser la r√©ponse vocale
      const voiceAnalysis = analyzeVoiceResponse(
        transcript,
        duration,
        question.category
      );

      processedAnswers.set(questionId, {
        transcript: transcript,
        analysis: voiceAnalysis,
        duration: duration,
        submittedAt: new Date()
      });

      console.log(`‚úÖ R√©ponse analys√©e pour question ${questionId}: ${transcript.length} chars`);
    }

    console.log(`‚úÖ ${processedAnswers.size} r√©ponses analys√©es`);

    // ‚úÖ VALIDATION: S'assurer qu'on a au moins une r√©ponse
    if (processedAnswers.size === 0) {
      console.log('‚ùå Aucune r√©ponse valide trouv√©e');
      return res.status(StatusCodes.BAD_REQUEST).json({
        message: 'Aucune r√©ponse valide trouv√©e'
      });
    }

    // G√©n√©rer l'analyse compl√®te
    const analysisResults = analyzeTestResults(processedAnswers, behavioralData);

    // Donn√©es comportementales enrichies
    const enhancedBehavioralData = {
      // Donn√©es de base
      securityViolations: behavioralData.securityViolations || 0,
      testDuration: behavioralData.testDuration || 45,
      
      // Donn√©es de phases (nouvelles)
      totalThinkingTime: (processedAnswers.size * 30), // 30s par question
      totalAnsweringTime: (processedAnswers.size * 60), // 60s par question
      averageThinkingTime: 30,
      averageAnsweringTime: 60,
      
      // Donn√©es de surveillance
      handDetectionTime: behavioralData.handDetectionTime || 88,
      cameraInterruptions: behavioralData.cameraInterruptions || 0,
      faceDetectionTime: behavioralData.faceDetectionTime || 95,
      
      // Performance vocale
      totalSpeakingTime: Array.from(processedAnswers.values())
        .reduce((sum, answer) => sum + (answer.duration || 0), 0),
      averageResponseDelay: behavioralData.averageResponseDelay || 2,
      silencePeriods: behavioralData.silencePeriods || 0,
      
      // Engagement et attention
      attentionScore: calculateConcentrationLevel(behavioralData),
      emotionalState: determineEmotionalState(processedAnswers),
      concentrationLevel: calculateConcentrationLevel(behavioralData),
      
      // Flags comportementaux d√©taill√©s
      behavioralFlags: behavioralData.behavioralFlags || [],
      
      // M√©triques par phase (nouvelles)
      phaseMetrics: {
        thinkingPhaseCompliance: calculateThinkingCompliance({
          ...behavioralData,
          numberOfQuestions: processedAnswers.size
        }),
        answeringPhaseEngagement: calculateAnsweringEngagement(processedAnswers),
        transitionEfficiency: calculateTransitionEfficiency({
          ...behavioralData,
          numberOfQuestions: processedAnswers.size
        })
      }
    };

    // Mettre √† jour le test
    test.answers = processedAnswers;
    test.analysisResults = analysisResults;
    test.behavioralData = enhancedBehavioralData;
    test.status = 'completed';
    test.completedAt = new Date();

    await test.save();

    // Mettre √† jour la candidature
    await Application.findByIdAndUpdate(
      test.application,
      {
        status: 'psychological_test_completed',
        psychologicalTestResults: {
          testId: test._id,
          overallScore: test.analysisResults.overall_score,
          completedAt: test.completedAt
        }
      }
    );

    console.log('‚úÖ Test psychologique compl√©t√© et candidature mise √† jour');

    // Pr√©parer un aper√ßu des r√©sultats
    const personalityHighlights = test.analysisResults.personality_traits;
    const dominantTrait = Object.entries(personalityHighlights)
      .reduce((a, b) => a[1] > b[1] ? a : b);

    res.status(StatusCodes.OK).json({
      message: 'Test psychologique compl√©t√© avec succ√®s',
      overallScore: test.analysisResults.overall_score,
      completedAt: test.completedAt,
      analysisPreview: {
        personalityHighlights: {
          dominant_trait: dominantTrait[0],
          dominant_score: dominantTrait[1],
          confidence_level: test.analysisResults.vocal_patterns.emotional_stability
        },
        recommendations: test.analysisResults.recommendations.slice(0, 2),
        keyInsights: test.analysisResults.detailed_insights.slice(0, 2)
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur soumission test psychologique:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        message: error.message
      });
    }

    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'Erreur lors de la soumission du test psychologique',
      error: error.message
    });
  }
};
// ================================
// FONCTIONS UTILITAIRES POUR LES DESCRIPTIONS
// ================================

const generatePersonalityDescription = (traits) => {
  const dominant = Object.entries(traits).reduce((a, b) => a[1] > b[1] ? a : b);
  const descriptions = {
    openness: "Vous √™tes ouvert aux nouvelles exp√©riences et id√©es innovantes, avec une forte curiosit√© intellectuelle",
    conscientiousness: "Vous √™tes organis√©, fiable et orient√© vers les objectifs, avec un sens aigu des responsabilit√©s",
    extraversion: "Vous √™tes sociable, √©nergique et aimez interagir avec les autres, source d'√©nergie dans les √©quipes",
    agreeableness: "Vous √™tes coop√©ratif, empathique et orient√© vers l'harmonie, facilitant les relations interpersonnelles",
    neuroticism: "Vous ressentez intens√©ment les √©motions et pouvez √™tre sensible au stress, n√©cessitant des strat√©gies de gestion"
  };
  return descriptions[dominant[0]] || "Profil √©quilibr√© avec des traits vari√©s selon les situations";
};

const generateEIDescription = (ei) => {
  const avg = Object.values(ei).reduce((sum, val) => sum + val, 0) / Object.keys(ei).length;
  if (avg >= 85) return "Intelligence √©motionnelle exceptionnelle - leadership naturel";
  if (avg >= 70) return "Bonne intelligence √©motionnelle - relations interpersonnelles solides";
  if (avg >= 55) return "Intelligence √©motionnelle correcte - potentiel de d√©veloppement";
  if (avg >= 40) return "Intelligence √©motionnelle moyenne - formation recommand√©e";
  return "Intelligence √©motionnelle √† d√©velopper prioritairement";
};

const generateVocalDescription = (vocal) => {
  const insights = [];
  if (vocal.average_speech_rate > 150) insights.push("d√©bit dynamique et engageant");
  if (vocal.linguistic_sophistication > 60) insights.push("vocabulaire riche et pr√©cis");
  if (vocal.emotional_stability > 80) insights.push("expression stable sous pression");
  if (vocal.response_coherence > 85) insights.push("r√©ponses tr√®s bien structur√©es");
  if (vocal.stress_indicators < 20) insights.push("excellente gestion du stress vocal");
  
  return insights.length > 0 ? 
    `Profil vocal ${insights.join(", ")}` : 
    "Profil vocal standard avec potentiel d'am√©lioration";
};

const generateCombinedAssessment = (technicalScore, psychologicalScore) => {
  const combined = (technicalScore + psychologicalScore) / 2;
  
  if (combined >= 90) return "Candidat exceptionnel - Profil technique et humain d'excellence, recommandation forte";
  if (combined >= 80) return "Excellent candidat - Comp√©tences techniques solides et excellentes qualit√©s relationnelles";
  if (combined >= 70) return "Tr√®s bon candidat - Bon √©quilibre technique-humain, potentiel de croissance";
  if (combined >= 60) return "Candidat prometteur - Points forts identifi√©s, accompagnement pour optimiser le potentiel";
  if (combined >= 50) return "Candidat √† potentiel - D√©veloppement n√©cessaire, envisager formation ou mentorat";
  return "Candidat n√©cessitant un accompagnement significatif - √©valuer l'ad√©quation avec le poste";
};

// ================================
// R√âCUP√âRER LES R√âSULTATS D√âTAILL√âS
// ================================

const getPsychologicalTestResults = async (req, res) => {
  const { testId } = req.params;
  const userId = req.user.userId;

  try {
    console.log(`üìä R√©cup√©ration r√©sultats test psychologique ${testId}`);

    const test = await PsychologicalTest.findById(testId)
      .populate('job', 'title description')
      .populate('technicalTest', 'score');

    if (!test) {
      throw new NotFoundError('Test psychologique non trouv√©');
    }

    if (test.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√©');
    }

    if (test.status !== 'completed') {
      throw new BadRequestError('Ce test n\'est pas encore compl√©t√©');
    }

    // Pr√©parer les r√©sultats d√©taill√©s
    const results = {
      testInfo: {
        testId: test._id,
        jobTitle: test.job.title,
        completedAt: test.completedAt,
        duration: test.behavioralData.testDuration,
        overallScore: test.analysisResults.overall_score,
        questionsAnswered: test.answers.size,
        totalQuestions: test.questions.length
      },
      personalityProfile: {
        traits: test.analysisResults.personality_traits,
        dominantTrait: Object.entries(test.analysisResults.personality_traits)
          .reduce((a, b) => a[1] > b[1] ? a : b),
        description: generatePersonalityDescription(test.analysisResults.personality_traits)
      },
      cognitiveProfile: {
        abilities: test.analysisResults.cognitive_abilities,
        strengths: Object.entries(test.analysisResults.cognitive_abilities)
          .filter(([_, score]) => score >= 75)
          .map(([trait, score]) => ({ trait, score })),
        areasForImprovement: Object.entries(test.analysisResults.cognitive_abilities)
          .filter(([_, score]) => score < 55)
          .map(([trait, score]) => ({ trait, score }))
      },
      emotionalIntelligence: {
        scores: test.analysisResults.emotional_intelligence,
        summary: generateEIDescription(test.analysisResults.emotional_intelligence),
        averageScore: Math.round(
          Object.values(test.analysisResults.emotional_intelligence)
            .reduce((sum, val) => sum + val, 0) / 
          Object.keys(test.analysisResults.emotional_intelligence).length
        )
      },
      vocalAnalysis: {
        patterns: test.analysisResults.vocal_patterns,
        summary: generateVocalDescription(test.analysisResults.vocal_patterns),
        keyMetrics: {
          averageWordsPerResponse: Math.round(
            Array.from(test.answers.values())
              .reduce((sum, answer) => sum + answer.analysis.totalWords, 0) / test.answers.size
          ),
          dominantEmotionalTone: Array.from(test.answers.values())
            .map(answer => answer.analysis.emotionalTone)
            .reduce((acc, tone) => {
              acc[tone] = (acc[tone] || 0) + 1;
              return acc;
            }, {}),
          consistencyScore: test.analysisResults.vocal_patterns.response_coherence
        }
      },
      behavioralInsights: {
        patterns: test.analysisResults.behavioral_patterns,
        phaseMetrics: test.behavioralData.phaseMetrics,
        flags: test.behavioralData.behavioralFlags,
        attentionScore: test.behavioralData.attentionScore,
        concentrationLevel: test.behavioralData.concentrationLevel,
        securityCompliance: {
          violations: test.behavioralData.securityViolations,
          complianceRate: Math.max(0, 100 - (test.behavioralData.securityViolations * 10))
        }
      },
      recommendations: test.analysisResults.recommendations,
      detailedInsights: test.analysisResults.detailed_insights,
      technicalTestComparison: {
        technicalScore: test.technicalTest?.score || 0,
        psychologicalScore: test.analysisResults.overall_score,
        combinedScore: Math.round(((test.technicalTest?.score || 0) + test.analysisResults.overall_score) / 2),
        combinedAssessment: generateCombinedAssessment(
          test.technicalTest?.score || 0,
          test.analysisResults.overall_score
        )
      },
      actionPlan: {
        immediateActions: test.analysisResults.recommendations.slice(0, 2),
        developmentAreas: Object.entries({
          ...test.analysisResults.personality_traits,
          ...test.analysisResults.cognitive_abilities,
          ...test.analysisResults.emotional_intelligence,
          ...test.analysisResults.behavioral_patterns
        })
        .filter(([_, score]) => score < 60)
        .sort(([_, scoreA], [__, scoreB]) => scoreA - scoreB)
        .slice(0, 3)
        .map(([area, score]) => ({ area, score, priority: score < 40 ? 'high' : 'medium' })),
        strengths: Object.entries({
          ...test.analysisResults.personality_traits,
          ...test.analysisResults.cognitive_abilities,
          ...test.analysisResults.emotional_intelligence,
          ...test.analysisResults.behavioral_patterns
        })
        .filter(([_, score]) => score >= 80)
        .sort(([_, scoreA], [__, scoreB]) => scoreB - scoreA)
        .slice(0, 5)
        .map(([area, score]) => ({ area, score }))
      }
    };

    console.log('‚úÖ R√©sultats d√©taill√©s pr√©par√©s');

    res.status(StatusCodes.OK).json({
      success: true,
      data: results
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration r√©sultats:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        success: false,
        message: error.message
      });
    }

    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des r√©sultats'
    });
  }
};

// ================================
// ENDPOINT POUR M√âTRIQUES EN TEMPS R√âEL
// ================================

const updateTestMetrics = async (req, res) => {
  const { testId } = req.params;
  const { metrics } = req.body;
  const userId = req.user.userId;

  try {
    const test = await PsychologicalTest.findById(testId);
    
    if (!test || test.candidate.toString() !== userId) {
      return res.status(404).json({ message: 'Test non trouv√©' });
    }

    if (test.status === 'completed') {
      return res.status(400).json({ message: 'Test d√©j√† compl√©t√©' });
    }

    // Mise √† jour des m√©triques en temps r√©el (optionnel)
    test.realtimeMetrics = {
      ...test.realtimeMetrics,
      ...metrics,
      lastUpdate: new Date()
    };

    await test.save();

    console.log(`üìä M√©triques temps r√©el mises √† jour pour test ${testId}`);

    res.status(200).json({ 
      success: true, 
      message: 'M√©triques mises √† jour',
      timestamp: new Date()
    });

  } catch (error) {
    console.error('‚ùå Erreur mise √† jour m√©triques:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur mise √† jour m√©triques' 
    });
  }
};

// ================================
// FONCTION DE SANT√â DU SERVICE
// ================================

const checkServiceHealth = async (req, res) => {
  try {
    // V√©rifier la connectivit√© √† la base de donn√©es
    const testCount = await PsychologicalTest.countDocuments();
    
    res.status(StatusCodes.OK).json({
      success: true,
      data: {
        service: 'psychological-test-service',
        status: 'healthy',
        timestamp: new Date(),
        database: 'connected',
        totalTests: testCount,
        features: {
          voiceAnalysis: true,
          behavioralTracking: true,
          realTimeMetrics: true,
          securityMonitoring: true
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur v√©rification sant√© service:', error);
    
    res.status(StatusCodes.SERVICE_UNAVAILABLE).json({
      success: false,
      data: {
        service: 'psychological-test-service',
        status: 'unhealthy',
        timestamp: new Date(),
        error: error.message
      }
    });
  }
};

// ================================
// EXPORTS
// ================================

module.exports = {
  createPsychologicalTest,
  getPsychologicalTest,
  startPsychologicalTest,
  submitPsychologicalTest,
  getPsychologicalTestResults,
  updateTestMetrics,
  checkServiceHealth
};