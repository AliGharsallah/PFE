const TechnicalTest = require('../models/TechnicalTest');
const Application = require('../models/Application'); // ‚úÖ Import seulement
const User = require('../models/User');
const { StatusCodes } = require('http-status-codes');
const { BadRequestError, NotFoundError, UnauthenticatedError } = require('../errors');
const { generateTechnicalTest, evaluateCodeSolution, checkOllamaAvailability } = require('../utils/aiService');

// G√©n√©rer un test technique pour une candidature approuv√©e
const createTest = async (req, res) => {
  const { id: applicationId } = req.params;
  const userId = req.user.userId;
  
  try {
    console.log(`üöÄ Cr√©ation de test pour l'application ${applicationId}`);
    
    const application = await Application.findOne({ _id: applicationId })
      .populate('job');
    
    if (!application) {
      throw new NotFoundError(`Pas de candidature avec l'id ${applicationId}`);
    }
    
    // V√©rifier que l'utilisateur est le candidat
    if (application.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√©');
    }
    
    // V√©rifier le statut de la candidature
    if (application.status !== 'approved') {
      throw new BadRequestError('Votre candidature doit √™tre approuv√©e pour passer un test');
    }
    
    // V√©rifier si un test existe d√©j√† pour cette candidature
    const existingTest = await TechnicalTest.findOne({ application: applicationId });
    if (existingTest) {
      console.log('‚ö†Ô∏è Test existant trouv√©, suppression pour r√©g√©n√©ration');
      // Supprimer l'ancien test pour en cr√©er un nouveau
      await TechnicalTest.findByIdAndDelete(existingTest._id);
      console.log('üóëÔ∏è Ancien test supprim√©');
    }
    
    // G√©n√©rer un nouveau test unique
    console.log('üî• G√©n√©ration d\'un nouveau test unique');
    
    // R√©cup√©rer tous les tests existants pour √©viter les doublons
    const allExistingTests = await TechnicalTest.find({
      candidate: { $ne: userId } // Exclure les tests du candidat actuel
    }).select('questions');
    
    console.log(`üìä ${allExistingTests.length} tests existants √† √©viter`);
    
    // V√©rifier la disponibilit√© du service IA
    console.log('üîç V√©rification de la disponibilit√© d\'Ollama...');
    const isOllamaAvailable = await checkOllamaAvailability();
    console.log(`üì° Ollama disponible: ${isOllamaAvailable}`);
    
    // G√©n√©rer les questions du test avec diversit√©
    console.log('ü§ñ G√©n√©ration des questions techniques uniques...');
    let questions;
    let attempts = 0;
    const maxAttempts = 3;
    
    do {
      attempts++;
      console.log(`üé≤ Tentative ${attempts}/${maxAttempts} de g√©n√©ration`);
      
      try {
        if (isOllamaAvailable) {
          questions = await generateTechnicalTest(application.job, allExistingTests, attempts);
        } else {
          questions = getDefaultQuestionsDirectly(application.job, allExistingTests, attempts);
        }
        
        // V√©rifier l'unicit√© du test g√©n√©r√©
        const isUnique = await isTestUnique(questions, allExistingTests);
        if (isUnique) {
          console.log(`‚úÖ Test unique g√©n√©r√© √† la tentative ${attempts}`);
          break;
        } else {
          console.log(`‚ö†Ô∏è Test similaire d√©tect√©, nouvelle tentative...`);
          questions = null;
        }
        
      } catch (error) {
        console.error(`‚ùå Erreur g√©n√©ration tentative ${attempts}:`, error.message);
        questions = null;
      }
      
    } while (!questions && attempts < maxAttempts);
    
    // Fallback si aucune g√©n√©ration unique n'a r√©ussi
    if (!questions || !Array.isArray(questions) || questions.length === 0) {
      console.log('‚ö†Ô∏è Utilisation du fallback avec questions par d√©faut vari√©es');
      questions = getDefaultQuestionsDirectly(application.job, allExistingTests, Math.random());
    }
    
    console.log(`üéØ ${questions.length} questions uniques g√©n√©r√©es`);
    
    // Cr√©er le nouveau test
    console.log('üíæ Cr√©ation du nouveau test en base de donn√©es...');
    const test = await TechnicalTest.create({
      job: application.job._id,
      application: applicationId,
      candidate: userId,
      questions,
      duration: application.job.testCriteria?.duration || 60,
      status: 'created'
    });
    
    // Pr√©parer les questions sans les r√©ponses correctes pour le candidat
    const safeQuestions = test.questions.map(q => ({
      _id: q._id,
      questionText: q.questionText,
      type: q.type,
      options: q.options
    }));
    
    console.log('‚úÖ Test unique cr√©√© avec succ√®s');
    res.status(StatusCodes.CREATED).json({
      testId: test._id,
      duration: test.duration,
      questions: safeQuestions,
      status: test.status
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du test:', error);
    
    // Retourner une erreur appropri√©e
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        message: error.message
      });
    }
    
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'Erreur interne lors de la cr√©ation du test'
    });
  }
};

// Fonction pour v√©rifier l'unicit√© d'un test
async function isTestUnique(newQuestions, existingTests) {
  if (!existingTests || existingTests.length === 0) {
    return true; // Aucun test existant, donc unique
  }
  
  // Comparer avec chaque test existant
  for (const existingTest of existingTests) {
    const similarity = calculateTestSimilarity(newQuestions, existingTest.questions);
    if (similarity > 0.7) { // Plus de 70% de similarit√© = non unique
      console.log(`‚ö†Ô∏è Test trop similaire d√©tect√© (${(similarity * 100).toFixed(1)}%)`);
      return false;
    }
  }
  
  return true;
}

// Fonction pour calculer la similarit√© entre deux tests
function calculateTestSimilarity(questions1, questions2) {
  if (!questions1 || !questions2 || questions1.length !== questions2.length) {
    return 0;
  }
  
  let similarQuestions = 0;
  
  for (let i = 0; i < questions1.length; i++) {
    const q1 = questions1[i];
    const q2 = questions2[i];
    
    // Comparer les textes des questions (similarit√© simple)
    if (q1.questionText === q2.questionText) {
      similarQuestions++;
    } else {
      // V√©rifier la similarit√© partielle
      const words1 = q1.questionText.toLowerCase().split(' ');
      const words2 = q2.questionText.toLowerCase().split(' ');
      const commonWords = words1.filter(word => words2.includes(word));
      
      if (commonWords.length / Math.max(words1.length, words2.length) > 0.6) {
        similarQuestions += 0.5;
      }
    }
  }
  
  return similarQuestions / questions1.length;
}

// Questions par d√©faut en cas d'√©chec du service IA
function getDefaultQuestionsDirectly(job, existingTests = [], seed = 1) {
  console.log('üìã G√©n√©ration directe des questions par d√©faut avec vari√©t√©');
  
  // Pool de questions vari√©es selon les comp√©tences
  const questionPools = {
    general: [
      {
        questionText: "Qu'est-ce que l'h√©ritage en programmation orient√©e objet ?",
        type: "multiple_choice",
        options: [
          "Un m√©canisme permettant √† une classe d'h√©riter des propri√©t√©s d'une autre",
          "Une m√©thode pour diviser le code en modules",
          "Un syst√®me de versioning",
          "Une technique d'optimisation"
        ],
        correctAnswer: "Un m√©canisme permettant √† une classe d'h√©riter des propri√©t√©s d'une autre",
        explanation: "L'h√©ritage permet √† une classe fille d'h√©riter des attributs et m√©thodes d'une classe parente."
      },
      {
        questionText: "Quelle est la diff√©rence entre let et var en JavaScript ?",
        type: "multiple_choice",
        options: [
          "var a une port√©e de fonction, let a une port√©e de bloc",
          "let a une port√©e de fonction, var a une port√©e de bloc",
          "Ils sont identiques",
          "var est plus rapide que let"
        ],
        correctAnswer: "var a une port√©e de fonction, let a une port√©e de bloc",
        explanation: "let a une port√©e de bloc, ce qui le rend plus pr√©visible que var."
      },
      {
        questionText: "Qu'est-ce qu'une API REST ?",
        type: "multiple_choice",
        options: [
          "Un type de base de donn√©es",
          "Une architecture pour les services web bas√©e sur HTTP",
          "Un langage de programmation",
          "Un framework frontend"
        ],
        correctAnswer: "Une architecture pour les services web bas√©e sur HTTP",
        explanation: "REST est une architecture web populaire utilisant HTTP."
      },
      {
        questionText: "Quel est le r√¥le d'un index dans une base de donn√©es ?",
        type: "multiple_choice",
        options: [
          "Sauvegarder la base de donn√©es",
          "Acc√©l√©rer les requ√™tes de lecture",
          "Crypter les donn√©es",
          "Cr√©er des backups automatiques"
        ],
        correctAnswer: "Acc√©l√©rer les requ√™tes de lecture",
        explanation: "Les index am√©liorent les performances de lecture des bases de donn√©es."
      },
      {
        questionText: "Qu'est-ce que le versioning s√©mantique ?",
        type: "multiple_choice",
        options: [
          "Un syst√®me pour nommer les branches Git",
          "Un format de versioning avec MAJOR.MINOR.PATCH",
          "Une technique de d√©ploiement",
          "Un outil de documentation"
        ],
        correctAnswer: "Un format de versioning avec MAJOR.MINOR.PATCH",
        explanation: "Le versioning s√©mantique suit le format MAJOR.MINOR.PATCH."
      },
      {
        questionText: "Quelle est la diff√©rence entre un processus et un thread ?",
        type: "multiple_choice",
        options: [
          "Un processus est plus l√©ger qu'un thread",
          "Un thread partage la m√©moire avec d'autres threads du m√™me processus",
          "Il n'y a pas de diff√©rence",
          "Un thread est plus s√©curis√© qu'un processus"
        ],
        correctAnswer: "Un thread partage la m√©moire avec d'autres threads du m√™me processus",
        explanation: "Les threads d'un m√™me processus partagent le m√™me espace m√©moire."
      },
      {
        questionText: "Qu'est-ce que la r√©cursion en programmation ?",
        type: "multiple_choice",
        options: [
          "Une boucle infinie",
          "Une fonction qui s'appelle elle-m√™me",
          "Une technique de tri",
          "Un type de variable"
        ],
        correctAnswer: "Une fonction qui s'appelle elle-m√™me",
        explanation: "La r√©cursion est quand une fonction s'appelle elle-m√™me avec des param√®tres modifi√©s."
      },
      {
        questionText: "Qu'est-ce que l'encapsulation en POO ?",
        type: "multiple_choice",
        options: [
          "Le fait de cacher les d√©tails d'impl√©mentation",
          "L'h√©ritage multiple",
          "La surcharge des m√©thodes",
          "L'instanciation des objets"
        ],
        correctAnswer: "Le fait de cacher les d√©tails d'impl√©mentation",
        explanation: "L'encapsulation permet de cacher les d√©tails internes d'un objet."
      }
    ],
    react: [
      {
        questionText: "Quelle est la diff√©rence entre state et props dans React ?",
        type: "multiple_choice",
        options: [
          "State est mutable, props est immutable",
          "Props est mutable, state est immutable",
          "Ils sont identiques",
          "State est plus rapide que props"
        ],
        correctAnswer: "State est mutable, props est immutable",
        explanation: "Le state est interne au composant, les props sont pass√©es par le parent."
      },
      {
        questionText: "Qu'est-ce que le Virtual DOM dans React ?",
        type: "multiple_choice",
        options: [
          "Une copie en m√©moire du DOM r√©el",
          "Un nouveau navigateur web",
          "Un framework CSS",
          "Une base de donn√©es"
        ],
        correctAnswer: "Une copie en m√©moire du DOM r√©el",
        explanation: "Le Virtual DOM est une repr√©sentation en m√©moire du DOM pour optimiser les updates."
      }
    ],
    python: [
      {
        questionText: "Quelle est la diff√©rence entre une liste et un tuple en Python ?",
        type: "multiple_choice",
        options: [
          "Les tuples sont immuables, les listes sont mutables",
          "Les listes sont immuables, les tuples sont mutables",
          "Ils sont identiques",
          "Les tuples sont plus lents"
        ],
        correctAnswer: "Les tuples sont immuables, les listes sont mutables",
        explanation: "Les tuples ne peuvent pas √™tre modifi√©s apr√®s leur cr√©ation."
      },
      {
        questionText: "Qu'est-ce qu'un d√©corateur en Python ?",
        type: "multiple_choice",
        options: [
          "Une fonction qui modifie le comportement d'une autre fonction",
          "Un type de variable",
          "Une boucle sp√©ciale",
          "Un module d'importation"
        ],
        correctAnswer: "Une fonction qui modifie le comportement d'une autre fonction",
        explanation: "Les d√©corateurs permettent de modifier ou √©tendre le comportement des fonctions."
      }
    ]
  };
  
  // S√©lectionner des questions en fonction des comp√©tences et de la vari√©t√©
  let selectedQuestions = [];
  const allQuestions = [...questionPools.general];
  
  // Ajouter des questions sp√©cifiques selon les comp√©tences
  if (job.technicalSkills && Array.isArray(job.technicalSkills)) {
    if (job.technicalSkills.some(skill => ['React', 'react'].includes(skill))) {
      allQuestions.push(...questionPools.react);
    }
    if (job.technicalSkills.some(skill => ['Python', 'python'].includes(skill))) {
      allQuestions.push(...questionPools.python);
    }
  }
  
  // Utiliser le seed pour cr√©er de la vari√©t√©
  const random = Math.sin(seed * 12.9898) % 1;
  const startIndex = Math.floor(random * Math.max(1, allQuestions.length - 5));
  
  // S√©lectionner 5 questions cons√©cutives avec rotation
  for (let i = 0; i < 5; i++) {
    const index = (startIndex + i) % allQuestions.length;
    selectedQuestions.push({ ...allQuestions[index] });
  }
  
  // M√©langer l√©g√®rement les options pour plus de vari√©t√©
  selectedQuestions.forEach(question => {
    if (question.options && typeof seed === 'number') {
      const shuffleSeed = Math.sin(seed * 78.233) % 1;
      if (shuffleSeed > 0.5) {
        // Permuter les deux premi√®res options parfois
        const temp = question.options[0];
        question.options[0] = question.options[1];
        question.options[1] = temp;
        
        // Ajuster la bonne r√©ponse si n√©cessaire
        if (question.correctAnswer === temp) {
          question.correctAnswer = question.options[0];
        } else if (question.correctAnswer === question.options[1]) {
          question.correctAnswer = question.options[1];
        }
      }
    }
  });
  
  console.log(`‚úÖ ${selectedQuestions.length} questions par d√©faut g√©n√©r√©es avec vari√©t√©`);
  return selectedQuestions;
}

// ‚úÖ FONCTION CORRIG√âE - Soumettre les r√©ponses au test
const submitTest = async (req, res) => {
  const { id: testId } = req.params;
  const { answers } = req.body;
  const userId = req.user.userId;
  
  try {
    console.log(`üìù Soumission du test ${testId}`);
    
    if (!answers || !Array.isArray(answers)) {
      throw new BadRequestError('Veuillez fournir des r√©ponses valides');
    }
    
    const test = await TechnicalTest.findOne({ _id: testId });
    if (!test) {
      throw new NotFoundError(`Pas de test avec l'id ${testId}`);
    }
    
    // V√©rifier que l'utilisateur est le candidat
    if (test.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√©');
    }
    
    // V√©rifier le statut du test
    if (test.status === 'completed') {
      throw new BadRequestError('Ce test a d√©j√† √©t√© compl√©t√©');
    }
    
    // V√©rifier que le nombre de r√©ponses correspond au nombre de questions
    if (answers.length !== test.questions.length) {
      throw new BadRequestError('Le nombre de r√©ponses ne correspond pas au nombre de questions');
    }
    
    // √âvaluer les r√©ponses
    console.log('üîç √âvaluation des r√©ponses...');
    let score = 0;
    const evaluatedAnswers = [];
    
    for (let i = 0; i < answers.length; i++) {
      const question = test.questions[i];
      const answer = answers[i];
      
      let isCorrect = false;
      let aiEvaluation = null;
      
      if (question.type === 'coding') {
        // Utiliser le service IA pour √©valuer le code
        try {
          aiEvaluation = await evaluateCodeSolution(question, answer);
          isCorrect = aiEvaluation.correct;
        } catch (error) {
          console.error('Erreur √©valuation IA:', error);
          // Fallback simple pour les questions de code
          isCorrect = answer && answer.trim().length > 10;
          aiEvaluation = {
            correct: isCorrect,
            feedback: "√âvaluation basique effectu√©e",
            score: isCorrect ? 50 : 0
          };
        }
      } else {
        // Pour les questions √† choix multiples
        isCorrect = answer === question.correctAnswer;
      }
      
      if (isCorrect) {
        score += 1;
      }
      
      evaluatedAnswers.push({
        questionId: question._id,
        submittedAnswer: answer,
        isCorrect,
        aiEvaluation
      });
    }
    
    // Calculer le score en pourcentage
    const percentage = (score / test.questions.length) * 100;
    
    // Mettre √† jour le test avec findByIdAndUpdate pour √©viter les conflits de version
    const updatedTest = await TechnicalTest.findByIdAndUpdate(
      testId,
      {
        candidateAnswers: evaluatedAnswers,
        score: percentage,
        status: 'completed',
        completedAt: new Date()
      },
      { 
        new: true,
        runValidators: true
      }
    );
    
    if (!updatedTest) {
      throw new NotFoundError('Test non trouv√© lors de la mise √† jour');
    }
    
    // ‚úÖ CORRECTION PRINCIPALE - Mettre √† jour la candidature avec le testId
    const application = await Application.findByIdAndUpdate(
      test.application,
      {
        status: 'test_completed',
        testResults: {
          score: percentage,
          completedAt: new Date(),
          testId: test._id  // ‚úÖ AJOUT CRUCIAL - Sauvegarder l'ID du test
        }
      },
      { 
        new: true,
        runValidators: true
      }
    );
    
    console.log('‚úÖ Candidature mise √† jour avec testId:', test._id);
    console.log(`‚úÖ Test compl√©t√© avec un score de ${percentage.toFixed(2)}%`);
    
    res.status(StatusCodes.OK).json({
      score: percentage.toFixed(2),
      correctAnswers: score,
      totalQuestions: test.questions.length,
      evaluatedAnswers
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la soumission du test:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        message: error.message
      });
    }
    
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'Erreur interne lors de la soumission du test'
    });
  }
};

// R√©cup√©rer un test sans les r√©ponses (pour candidat)
const getTest = async (req, res) => {
  const { id: testId } = req.params;
  const userId = req.user.userId;
  
  try {
    console.log(`üìñ R√©cup√©ration du test ${testId}`);
    
    const test = await TechnicalTest.findOne({ _id: testId });
    if (!test) {
      throw new NotFoundError(`Pas de test avec l'id ${testId}`);
    }
    
    // V√©rifier que l'utilisateur est le candidat
    if (test.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√©');
    }
    
    // Pr√©parer les questions sans les r√©ponses correctes
    const safeQuestions = test.questions.map(q => ({
      _id: q._id,
      questionText: q.questionText,
      type: q.type,
      options: q.options
    }));
    
    console.log(`‚úÖ Test r√©cup√©r√© avec ${safeQuestions.length} questions`);
    
    res.status(StatusCodes.OK).json({
      testId: test._id,
      duration: test.duration,
      status: test.status,
      questions: safeQuestions,
      startedAt: test.startedAt,
      completedAt: test.completedAt
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du test:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        message: error.message
      });
    }
    
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'Erreur interne lors de la r√©cup√©ration du test'
    });
  }
};

// Marquer un test comme commenc√©
const startTest = async (req, res) => {
  const { id: testId } = req.params;
  const userId = req.user.userId;
  
  try {
    console.log(`‚ñ∂Ô∏è D√©marrage du test ${testId}`);
    
    const test = await TechnicalTest.findOne({ _id: testId });
    if (!test) {
      throw new NotFoundError(`Pas de test avec l'id ${testId}`);
    }
    
    // V√©rifier que l'utilisateur est le candidat
    if (test.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√©');
    }
    
    // V√©rifier le statut du test
    if (test.status === 'completed') {
      throw new BadRequestError('Ce test a d√©j√† √©t√© compl√©t√©');
    }
    
    if (test.status === 'in_progress') {
      // Test d√©j√† en cours, retourner les informations existantes
      console.log('‚ö†Ô∏è Test d√©j√† en cours');
      return res.status(StatusCodes.OK).json({
        message: 'Test d√©j√† en cours',
        startedAt: test.startedAt,
        status: test.status
      });
    }
    
    // Mettre √† jour le test avec findByIdAndUpdate pour √©viter les conflits de version
    const updatedTest = await TechnicalTest.findByIdAndUpdate(
      testId,
      {
        status: 'in_progress',
        startedAt: new Date()
      },
      { 
        new: true,
        runValidators: true
      }
    );
    
    if (!updatedTest) {
      throw new NotFoundError('Test non trouv√© lors de la mise √† jour');
    }
    
    // Mettre √† jour la candidature avec findByIdAndUpdate
    const application = await Application.findByIdAndUpdate(
      test.application,
      { status: 'test_in_progress' },
      { 
        new: true,
        runValidators: true
      }
    );
    
    console.log('‚úÖ Test d√©marr√© avec succ√®s');
    
    res.status(StatusCodes.OK).json({
      message: 'Test commenc√©',
      startedAt: updatedTest.startedAt
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du test:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        message: error.message
      });
    }
    
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: 'Erreur interne lors du d√©marrage du test'
    });
  }
};

// Analyser un CV avec gestion d'erreur am√©lior√©e
const analyzeResume = async (req, res) => {
  try {
    console.log('üîç D√©but de l\'analyse de CV...');
    
    const { resumePath, jobId } = req.body;
    const userId = req.user.userId;
    
    if (!resumePath || !jobId) {
      throw new BadRequestError('resumePath et jobId sont requis');
    }
    
    // V√©rifier que le job existe
    const job = await Job.findById(jobId);
    if (!job) {
      throw new NotFoundError(`Pas de poste avec l'id ${jobId}`);
    }
    
    // V√©rifier les permissions d'acc√®s au job si n√©cessaire
    // (selon votre logique m√©tier)
    
    console.log('üìÑ Analyse du CV pour le poste:', job.title);
    
    // Analyser le CV avec le service (avec gestion d'erreur int√©gr√©e)
    const { analyzeResume } = require('../utils/aiService');
    const analysis = await analyzeResume(resumePath, job);
    
    console.log('‚úÖ Analyse termin√©e:', analysis);
    
    res.status(StatusCodes.OK).json({
      success: true,
      data: analysis
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse du CV:', error);
    
    res.status(error.statusCode || StatusCodes.INTERNAL_SERVER_ERROR).json({
      success: false,
      message: error.message || 'Erreur lors de l\'analyse du CV'
    });
  }
};

// Obtenir les r√©sultats d'un test (pour le candidat)
const getTestResults = async (req, res) => {
  const { id: testId } = req.params;
  const userId = req.user.userId;
  
  try {
    console.log(`üìä R√©cup√©ration des r√©sultats du test ${testId}`);
    
    const test = await TechnicalTest.findOne({ _id: testId })
      .populate('job', 'title description')
      .populate('application');
    
    if (!test) {
      throw new NotFoundError(`Pas de test avec l'id ${testId}`);
    }
    
    // V√©rifier que l'utilisateur est le candidat
    if (test.candidate.toString() !== userId) {
      throw new UnauthenticatedError('Acc√®s non autoris√©');
    }
    
    // V√©rifier que le test est compl√©t√©
    if (test.status !== 'completed') {
      throw new BadRequestError('Ce test n\'est pas encore compl√©t√©');
    }
    
    // Pr√©parer les r√©sultats (sans r√©v√©ler les bonnes r√©ponses)
    const results = {
      testId: test._id,
      jobTitle: test.job.title,
      score: test.score,
      completedAt: test.completedAt,
      duration: test.duration,
      totalQuestions: test.questions.length,
      correctAnswers: test.candidateAnswers.filter(a => a.isCorrect).length,
      status: test.status
    };
    
    console.log(`‚úÖ R√©sultats r√©cup√©r√©s: ${test.score}%`);
    
    res.status(StatusCodes.OK).json({
      success: true,
      data: results
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des r√©sultats:', error);
    
    if (error.statusCode) {
      return res.status(error.statusCode).json({
        success: false,
        message: error.message
      });
    }
    
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      success: false,
      message: 'Erreur interne lors de la r√©cup√©ration des r√©sultats'
    });
  }
};

// Fonction utilitaire pour v√©rifier la sant√© du service IA
const checkAIServiceHealth = async (req, res) => {
  try {
    console.log('üîç V√©rification de la sant√© du service IA...');
    
    const { checkOllamaAvailability } = require('../utils/aiService');
    const isAvailable = await checkOllamaAvailability();
    
    res.status(StatusCodes.OK).json({
      success: true,
      data: {
        aiServiceAvailable: isAvailable,
        timestamp: new Date(),
        status: isAvailable ? 'healthy' : 'unavailable'
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du service IA:', error);
    
    res.status(StatusCodes.OK).json({
      success: true,
      data: {
        aiServiceAvailable: false,
        timestamp: new Date(),
        status: 'error',
        error: error.message
      }
    });
  }
};

// ‚úÖ NOUVELLE FONCTION - R√©cup√©rer un test technique via l'ID de candidature
const getTestByApplication = async (req, res) => {
  try {
    const { applicationId } = req.params;
    console.log('üîç Recherche test pour candidature:', applicationId);

    // R√©cup√©rer la candidature avec le testId
    const application = await Application.findById(applicationId);
    if (!application) {
      return res.status(404).json({ message: 'Candidature non trouv√©e' });
    }

    console.log('üìã Candidature trouv√©e:', {
      id: application._id,
      testId: application.testResults?.testId
    });

    // V√©rifier si un test technique existe pour cette candidature
    if (!application.testResults?.testId) {
      return res.status(404).json({ message: 'Aucun test technique associ√© √† cette candidature' });
    }

    // R√©cup√©rer le test technique
    const test = await TechnicalTest.findById(application.testResults.testId);
    if (!test) {
      return res.status(404).json({ message: 'Test technique non trouv√©' });
    }

    console.log('‚úÖ Test technique trouv√©:', test._id);

    res.status(200).json({
      test,
      message: 'Test technique r√©cup√©r√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur getTestByApplication:', error);
    res.status(500).json({ 
      message: 'Erreur serveur lors de la r√©cup√©ration du test',
      error: error.message 
    });
  }
};

// ‚úÖ EXPORTS CORRIG√âS - Toutes les fonctions export√©es
module.exports = {
  createTest,
  submitTest,
  getTest,
  startTest,
  analyzeResume,
  getTestResults,
  checkAIServiceHealth,
  getTestByApplication  // ‚úÖ AJOUT CRUCIAL
};